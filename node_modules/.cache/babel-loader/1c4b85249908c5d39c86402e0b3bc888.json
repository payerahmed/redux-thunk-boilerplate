{"ast":null,"code":"import _regeneratorRuntime from \"/home/payer/Desktop/redux-thunk-boilerplate/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/payer/Desktop/redux-thunk-boilerplate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var fetchData = function fetchData(count, inputString) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\".concat(inputString).concat(count));\n\n              case 2:\n                res = _context.sent;\n                _context.next = 5;\n                return res.json();\n\n              case 5:\n                data = _context.sent;\n                dispatch({\n                  type: \"FETCH_DATA\",\n                  data: data\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/payer/Desktop/redux-thunk-boilerplate/src/Data/DataThunk.js"],"names":["fetchData","count","inputString","dispatch","fetch","res","json","data","type"],"mappings":";;AAAA,OAAO,IAAIA,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAwB,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC7BC,KAAK,WAAIF,WAAJ,SAAkBD,KAAlB,EADwB;;AAAA;AACzCI,gBAAAA,GADyC;AAAA;AAAA,uBAE5BA,GAAG,CAACC,IAAJ,EAF4B;;AAAA;AAEzCC,gBAAAA,IAFyC;AAG7CJ,gBAAAA,QAAQ,CAAC;AACPK,kBAAAA,IAAI,EAAE,YADC;AAEPD,kBAAAA,IAAI,EAAJA;AAFO,iBAAD,CAAR;;AAH6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["export let fetchData = (count, inputString) => async dispatch => {\n  let res = await fetch(`${inputString}${count}`)\n  let data = await res.json()\n  dispatch({\n    type: \"FETCH_DATA\",\n    data\n  })\n}\n"]},"metadata":{},"sourceType":"module"}